#include <stdlib.h>
#include "lists.h"

/**
 * insert_node - inserts a number into a sorted singly linked list
 * @head: pointer to the head of the list
 * @number: number to insert
 * Return: the address of the new node, or NULL if it failed
 */
listint_t *insert_node(listint_t **head, int number)
{
  listint_t *new, *current, *prev;

  /* allocate memory for the new node */
  new = malloc(sizeof(listint_t));
  if (new == NULL)
    return (NULL);

  /* assign the number to the new node */
  new->n = number;

  /* if the list is empty or the number is smaller than the head, insert at the beginning */
  if (*head == NULL || number < (*head)->n)
  {
    new->next = *head;
    *head = new;
    return (new);
  }

  /* otherwise, traverse the list until the correct position is found */
  current = *head;
  prev = NULL;
  while (current != NULL && number >= current->n)
  {
    prev = current;
    current = current->next;
  }

  /* insert the new node between prev and current */
  new->next = current;
  prev->next = new;

  /* return the address of the new node */
  return (new);
}


This function uses a pointer to the head of the list and the number to insert as parameters. It allocates memory for a new node and assigns the number to it. Then, it checks if the list is empty or the number is smaller than the head, in which case it inserts the new node at the beginning of the list. Otherwise, it traverses the list until it finds the correct position to insert the new node, which is between the previous and current nodes. Finally, it returns the address of the new node, or NULL if it failed to allocate memory.